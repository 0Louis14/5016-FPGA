`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////

module VGA(clock,disp_RGB,hsync,vsync,left,right,middle,rst);
	input clock;    //系统输入时钟100MHz
	input rst;     //复位  
	input left,right,middle;//左右中3个控制按键
	output[5:0]disp_RGB;//VGA数据输出
	output hsync;//VGA行同步信号
	output vsync;//VGA场同步信号
	reg [9:0]  hcount;  //VGA行扫描计数器
	reg [9:0]  vcount; //VGA场扫描计数器
	reg [11:0]  data;  
	reg [11:0]  h_dat;
	reg [11:0]  v_dat;
	reg [11:0] x_dat;
	reg [11:0] data1;
	reg flag=0;
	wire hcount_ov;
	wire vcount_ov;
	wire dat_act;
	wire hsync;
	wire vsync;
	reg background=12'b010010000101;   
	reg gezi=12'b01010100001;
	reg jieshuse=12'hf00;
	reg vga_clk=0;
	reg cnt_clk=0;//分频计数
   
	always@(posedge clock)
		begin
			if(cnt_clk==1)
			begin
				vga_clk<=~vga_clk;
				cnt_clk<=0;
			end
			else
			cnt_clk<=cnt_clk+1;
		end
//***************VGA驱动部分*****************8//
//行扫描
// VGA行、场扫描时序参数表
	parameter hsync_end =10'd95,
	hdat_begin=10'd143,
	hdat_end=10'd783,
	hpixel_end=10'd799,
	vsync_end=10'd1,
	vdat_begin =10'd34,
	vdat_end=10'd514,
	vline_end=10'd524;

//***************VGA驱动部分*****************8//
//行扫描

	always@(posedge vga_clk)
		begin
			if(hcount_ov)
				hcount<=10'd0;
			else
				hcount <= hcount + 10'd1;
		end
	assign hcount_ov =(hcount==hpixel_end);

//场扫描
	always@(posedge vga_clk)
		begin 
			if(hcount_ov)
			begin 
				if(vcount_ov)
					vcount<=10'd0;
				else 
					vcount<=vcount+10'd1;
			end
		end
	assign vcount_ov=(vcount==vline_end);
    
    //数据、同步信号
    //adt_act图像数据有效标志信号
    assign dat_act=((hcount>=hdat_begin)&&(hcount<hdat_end))&&((vcount>=vdat_begin)&&(vcount<vdat_end));
    assign hsync=(hcount>hsync_end);
    assign vsync=(vcount>vsync_end);
   
   //消隐强制输出二选一多路器
    assign disp_RGB=(dat_act)?data:6'h00;
   //diso_RGB为输出到VGA接口数据，data为其他模块传递的正确图像数据
    
//计时1秒
	reg [28:0]jishu_1s=0;
	reg clk_1s=0;
	localparam tick=50000000;
	always @ (posedge clock)
		begin
         if(jishu_1s==tick)
         begin
				jishu_1s<=0;
				clk_1s=~clk_1s;
         end
			else
         begin
				jishu_1s<=jishu_1s+1;
         end 
		end

//计时50ms
	reg clk_50ms=0;
   localparam DVSR=5000000;
   reg [28:0] js;
	always @ (posedge clock)
		begin
         if(js==DVSR)
         begin
				js<=0;
				clk_50ms=~clk_50ms;
         end
			else
         begin
				js<=js+1;
         end 
		end


//产生竖长条
	always@(posedge vga_clk)
		begin
			if(hcount<=220||hcount>=620)
				v_dat <= 12'h000;//hei
			else if(hcount==240 ||hcount ==360||hcount ==480||hcount==600)
				v_dat <= 12'h000;//hei
			else 
				v_dat <= 12'hfff;//bai
		end

//产生横长条
	always@(posedge vga_clk)
		begin
			if(vcount<=70||vcount>=470)
				h_dat <= 12'h000;//hei
			else if(vcount==90 ||vcount ==210||vcount ==330||vcount ==450)
				h_dat <= 12'h000;
			else
				h_dat <= 12'hfff;                                                      //背景
		end


	parameter	WIDTH = 60, //矩形长
					HEIGHT = 60,  //矩形宽
               //显示区域的边界
					DISV_TOP = 10'd120,
					DISV_DOWN =DISV_TOP+HEIGHT,
					DISH_LEFT = 10'd270,
					DISH_RIGHT = DISH_LEFT + WIDTH;
					//初始矩形的位置，在显示区的左下角               
					reg [9:0] topbound =DISV_TOP;
					reg [9:0] downbound  ;
					reg [9:0] leftbound = DISH_LEFT ;
					reg [9:0] rightbound  ;
					reg [1:0] weizhi=0;
          
	//3个位置信息                        
	always@(posedge clk_50ms)
	begin
		case(weizhi[1:0])
         3'b00:
			begin 
				leftbound<=10'd270;
				topbound<=10'd240; //左
         end 
			3'b01:  
			begin 
				leftbound<=10'd390;
				topbound<=10'd240;   //中                                           
			end
			3'b10:  
			begin
				leftbound<=10'd510;
				topbound<=10'd240;  //右
			end                         
		endcase
	end

	reg flag_on=0;
//按键位置与屏幕上地鼠位置相同，则改变屏幕上地鼠色块的颜色
   always @(posedge clk_50ms) 
		begin 
			if( left==1 && weizhi==0 )
			begin
				flag<=1;//   flag_on<=1;
            end
            else if( middle==1 && weizhi==1 )
			begin
            flag<=1; //   flag_on<=1;
            end
		  	else if( right==1 && weizhi==2 )
			begin
            flag<=1;
            flag_on<=1;
         end
         else  
			begin
            flag<=0; //    flag_on<=0;
         end
		end
                             
	reg [5:0] i=0;

//每过2秒色块换一个位置
//20位的伪随机数
	wire [7:0] position[0:19];
	assign position[0]=0;
	assign position[1]=2; 
	assign position[2]=1;
	assign position[3]=2;
	assign position[4]=1;
	assign position[5]=0;
	assign position[6]=1; 
	assign position[7]=0;
	assign position[8]=2;
	assign position[9]=1;
	assign position[10]=1;
	assign position[11]=0;
	assign position[12]=1;
	assign position[13]=1; 
	assign position[14]=2;
	assign position[15]=0;
	assign position[16]=0;
	assign position[17]=2;
	assign position[18]=2; 
	assign position[19]=0; 



	reg [11:0]data2=12'h652;
	reg count_20=0;
	reg [5:0]num=0;              
	reg [5:0]num1=0;    
	reg [5:0]cnt_60ss=60;    
	reg flag_kaishi=0;
	reg flag_jieshu=0;
	reg [4:0]cnt_60s=0;
  
  //地鼠出现时间及相关参数控制模块
	always@(posedge clk_1s)
		begin
			i<=i+1;
			weizhi<=position[i];
			if(i>=19)
				i<=0;
			if(weizhi>=2)
				weizhi<=0;
			if(flag==1)
				num1<=num1+1;
			if(num1==60)
			begin
				num1<=0;
				x_dat<= data2;
			end
			if(rst==1)
				num1<=0;
			if( flag_kaishi )
				cnt_60ss<=cnt_60ss-1;
			if(cnt_60ss==0)
				cnt_60ss<=0;
		end
           
                //着色一个小色块
	always @(posedge clock) 
		begin  
			rightbound = leftbound + 10'd60 ;
			downbound = topbound + 10'd60;
			if( hcount >= leftbound &&  hcount <= rightbound &&  vcount<= downbound &&  vcount >= topbound && flag==0)
				x_dat<= 12'h0f0;
			else if( hcount >= leftbound &&  hcount <= rightbound &&  vcount<= downbound &&  vcount >= topbound && flag==1)
			begin
				x_dat<= 12'hf00;     
			end    
			else 
				x_dat<=12'hfff; //黑色
		end               
//计数刷新，倒计时重新置数
	always@(posedge clock)
		begin
			if(rst==1)
				num<=0;
				cnt_60ss<=60;
		end
		
  //显示图像  
	always@(posedge clock)
		begin
			if(rst)
			begin
				data1<=h_dat&v_dat;
				cnt_60ss<=60;
				flag_kaishi=0;
				flag_jieshu=0;
			end
    
    //第一次进入或复位后，有按键按下，则进入游戏画面
			if(!rst &&left==1||right==1||middle==1)
				flag_kaishi=1;
		
     //游戏开始且游戏结束标志位未置一，则显示游戏画面
			if(!rst && flag_kaishi==1 && !flag_jieshu)
				data1<=x_dat&h_dat&v_dat;
    
     //倒计时60s结束，结束标志位置一
			if(cnt_60ss==0)
			begin
				flag_jieshu=1;      
			end       
			data<=data1;    
		end
endmodule
